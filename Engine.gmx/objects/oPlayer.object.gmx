<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>light = surface_create(1024, 768);
size = 700;
len = 400;
outline = false;
w = sprite_get_width(sWall);
h = sprite_get_height(sWall);
q = ds_queue_create();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_blend_mode(bm_subtract);
surface_set_target(light);
draw_ellipse_colour(x-size/2-view_xview, y-size/2-view_yview, x+size/2-view_xview, y+size/2-view_yview, c_white, c_black, false); 
surface_reset_target();
draw_set_blend_mode(bm_normal);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_set_target(light);
draw_set_colour(c_white);
draw_rectangle(0, 0, 1024, 768, false);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw 

draw_self();

// Draw rays

tempCount = 0;
with(oWall) 
    {
     if (distance_to_object(oPlayer) &lt; oPlayer.size)
        {
         ds_queue_enqueue(oPlayer.q, (id));
         oPlayer.tempCount++;
         
        }
    }



for (i = 0; i &lt;= tempCount; i++)
{
var inst = ds_queue_dequeue(q);


d[0] = point_direction(oPlayer.x, oPlayer.y, inst.x + 0, inst.y + 0);
d[1] = point_direction(oPlayer.x, oPlayer.y, inst.x + 0, inst.y + sprite_get_height(sWall) - 0);
d[2] = point_direction(oPlayer.x, oPlayer.y, inst.x + sprite_get_width(sWall) - 0, inst.y + sprite_get_height(sWall) - 0);
d[3] = point_direction(oPlayer.x, oPlayer.y, inst.x + sprite_get_width(sWall) - 0, inst.y + 0);

draw_set_colour(c_yellow); 
for (j = 0; j &lt; array_length_1d(d); j++)
    {
     //draw_line(oPlayer.x, oPlayer.y, x + lengthdir_x(len, d[j]), y + lengthdir_y(len, d[j]));
     lx[j] = lengthdir_x(len, d[j]);
     ly[j] = lengthdir_y(len, d[j]);
     
     if (collision_line(oPlayer.x, oPlayer.y, oPlayer.x + lx[j], oPlayer.y + ly[j], oWall, false, true)) {c[j] = true;} else {c[j] = false;}
    } 
  
draw_set_colour(c_black);    

if ((c[0] || c[1] || c[2] || c[3]))
{
if (c[2]) {draw_triangle(inst.x + w, inst.y + h, inst.x + w, inst.y, x + lx[2], y + ly[2], outline);}
if (c[3] &amp;&amp; c[2]) {draw_triangle(inst.x + w, inst.y, x + lx[2], y + ly[2], x + lx[3], y + ly[3], outline);}
if (c[0] &amp;&amp; c[3])  {draw_triangle(inst.x + w, inst.y, x + lx[3], y + ly[3], inst.x, inst.y, outline);}
if (c[0] &amp;&amp; c[3]) {draw_triangle(inst.x, inst.y, x + lx[3], y + ly[3], x + lx[0], y + ly[0], outline);}
if (c[0] &amp;&amp; c[1]) {draw_triangle(x + lx[0], y + ly[0], inst.x, inst.y, x + lx[1], y + ly[1], outline);}
if (c[0] &amp;&amp; c[1]) {draw_triangle(x + lx[1], y + ly[1], x + lx[0], y + ly[0], inst.x, inst.y + h, outline);}
if (c[1]) {draw_triangle(x + lx[1], y + ly[1], inst.x + w, inst.y + h, inst.x, inst.y + h, outline);}
if (c[1] &amp;&amp; c[2]) {draw_triangle(x + lx[1], y + ly[1], inst.x + w, inst.y + h, x + lx[2], y + ly[2], outline);}
}
draw_set_colour(c_black);
}
x = mouse_x;
y = mouse_y;

draw_set_colour(c_black);
draw_set_blend_mode(bm_subtract);
draw_surface(light, view_xview, view_yview);
draw_set_blend_mode(bm_normal);

draw_set_colour(c_red);
draw_text(20, 20, "Casters: " + string(tempCount));
draw_text(20, 40, "Fps: " + string(fps_real));


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
